% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boxes.R
\name{box}
\alias{box}
\alias{boxLabel}
\alias{boxSidebar}
\alias{updateBox}
\alias{updateBoxSidebar}
\alias{boxDropdown}
\alias{boxDropdownItem}
\alias{dropdownDivider}
\title{Create a box for the main body of a dashboard}
\usage{
box(
  ...,
  id = NULL,
  title = NULL,
  footer = NULL,
  status = NULL,
  solidHeader = FALSE,
  background = NULL,
  width = 6,
  height = NULL,
  collapsible = FALSE,
  collapsed = FALSE,
  closable = FALSE,
  icon = NULL,
  gradient = FALSE,
  boxToolSize = "sm",
  label = NULL,
  dropdownMenu = NULL,
  sidebar = NULL,
  footerPadding = TRUE
)

boxLabel(text, status, style = "default")

boxSidebar(
  ...,
  id = NULL,
  width = "25\%",
  background = "#333a40",
  startOpen = FALSE,
  icon = shiny::icon("cogs")
)

updateBox(
  id,
  action = c("remove", "toggle", "restore"),
  session = shiny::getDefaultReactiveDomain()
)

updateBoxSidebar(id, session = shiny::getDefaultReactiveDomain())

boxDropdown(..., icon = shiny::icon("wrench"))

boxDropdownItem(..., href)

dropdownDivider()
}
\arguments{
\item{...}{Item content.}

\item{id}{Sidebar id.}

\item{title}{Optional title.}

\item{footer}{Optional footer text.}

\item{status}{label color status. See \url{https://adminlte.io/themes/AdminLTE/pages/UI/general.html}.
Valid statuses are defined as follows:
\itemize{
  \item \code{primary}: \Sexpr[results=rd, stage=render]{shinydashboardPlus:::rd_color_tag("#3c8dbc")}
  \item \code{success}: \Sexpr[results=rd, stage=render]{shinydashboardPlus:::rd_color_tag("#00a65a")}
  \item \code{info}: \Sexpr[results=rd, stage=render]{shinydashboardPlus:::rd_color_tag("#00c0ef")}
  \item \code{warning}: \Sexpr[results=rd, stage=render]{shinydashboardPlus:::rd_color_tag("#f39c12")}
  \item \code{danger}: \Sexpr[results=rd, stage=render]{shinydashboardPlus:::rd_color_tag("#f56954")}
}}

\item{solidHeader}{Should the header be shown with a solid color background?}

\item{background}{Sidebar background color. Dark by default. Expect a HEX code.}

\item{width}{Sidebar width in percentage. 25\% by default. A character value of any width CSS understands (e.g. "100px").}

\item{height}{The height of a box, in pixels or other CSS unit. By default
the height scales automatically with the content.}

\item{collapsible}{If TRUE, display a button in the upper right that allows
the user to collapse the box.}

\item{collapsed}{If TRUE, start collapsed. This must be used with
\code{collapsible=TRUE}.}

\item{closable}{If TRUE, display a button in the upper right that allows the user to close the box.}

\item{icon}{Dropdown menu icon. Expect \code{\link[shiny]{icon}}.}

\item{gradient}{Whether to allow gradient effect for the background color. Default to FALSE.}

\item{boxToolSize}{Size of the toolbox: choose among "xs", "sm", "md", "lg".}

\item{label}{Slot for \link{boxLabel}.}

\item{dropdownMenu}{List of items in the boxtool dropdown menu. Use \link{boxDropdown}.}

\item{sidebar}{Slot for \link{boxSidebar}.}

\item{footerPadding}{TRUE by default: whether the footer has margin or not.}

\item{text}{Label text. In practice only few letters or a number.}

\item{style}{label border style: "default" (rounded angles), "circle" or "square".}

\item{startOpen}{Whether the sidebar is open at start. FALSE by default.}

\item{action}{Action to trigger: either collapse, remove or restore.}

\item{session}{Shiny session object.}

\item{href}{Target url or page.}
}
\description{
\link{box} can be used to hold content in the main body of a dashboard.

\link{boxLabel} is inserted in the label slot of \link{box}.

\link{boxSidebar} is inserted in the sidebar slot of \link{box}.

\link{updateBox} is used to toggle, close or restore a \link{box} on the client.

\link{updateBoxSidebar} toggle a \link{boxSidebar} on the client.

\link{boxDropdown} is used in the dropdown parameter of \link{box}.

\link{boxDropdownItem} goes in \link{boxDropdown}.

\link{dropdownDivider} goes in \link{boxDropdown} but also in any
dropdown menu container.
}
\examples{

# A box with label, sidebar, dropdown menu
if (interactive()) {
 library(shiny)
 library(shinydashboard)
 library(shinydashboardPlus)

 shinyApp(
   ui = dashboardPage(
     dashboardHeader(),
     dashboardSidebar(),
     dashboardBody(
      box(
        title = "Closable Box with dropdown", 
        closable = TRUE, 
        width = 12,
        status = "warning", 
        solidHeader = FALSE, 
        collapsible = TRUE,
        label = boxLabel(
         text = 1,
         status = "danger",
         style = "circle"
        ),
        dropdownMenu = boxDropdown(
         boxDropdownItem(href = "http://www.google.com", "Link to google"),
         boxDropdownItem(href = "#", "item 2"),
         dropdownDivider(),
         boxDropdownItem(href = "#", "item 3")
        ),
        sidebar = boxSidebar(
         startOpen = TRUE,
         inputId = "mycardsidebar",
         sliderInput(
          "obs", 
          "Number of observations:",
          min = 0, 
          max = 1000, 
          value = 500
         )
        ),
        plotOutput("distPlot")
       )
     )
   ),
   server = function(input, output) {
    output$distPlot <- renderPlot({
     hist(rnorm(input$obs))
    })
   }
 )
}

# Toggle a box on the client
if (interactive()) {
 library(shiny)
 library(shinydashboard)
 library(shinydashboardPlus)
 
 ui <- dashboardPage(
   dashboardHeader(),
   dashboardSidebar(),
   dashboardBody(
     tags$style("body { background-color: ghostwhite}"),
     fluidRow(
       actionButton("toggle_box", "Toggle Box"),
       actionButton("remove_box", "Remove Box", class = "bg-danger"),
       actionButton("restore_box", "Restore Box", class = "bg-success")
     ),
     br(),
     box(
       title = textOutput("box_state"),
       "Box body",
       id = "mybox",
       collapsible = TRUE,
       closable = TRUE,
       plotOutput("plot")
     )
   )
 )
 
 server <- function(input, output, session) {
   output$plot <- renderPlot({
     req(!input$mybox$collapsed)
     plot(rnorm(200))
   })
   
   output$box_state <- renderText({
     state <- if (input$mybox$collapsed) "collapsed" else "uncollapsed"
     paste("My box is", state)
   })
   
   observeEvent(input$toggle_box, {
     updateBox("mybox", action = "toggle")
   })
   
   observeEvent(input$remove_box, {
     updateBox("mybox", action = "remove")
   })
   
   observeEvent(input$restore_box, {
     updateBox("mybox", action = "restore")
   })
   
   observeEvent(input$mybox$visible, {
     collapsed <- if (input$mybox$collapsed) "collapsed" else "uncollapsed"
     visible <- if (input$mybox$visible) "visible" else "hidden"
     message <- paste("My box is", collapsed, "and", visible)
     showNotification(message, type = "warning", duration = 1)
   })
   
 }
 
 shinyApp(ui, server)
}

# Toggle a box sidebar
if (interactive()) {
 library(shiny)
 library(shinydashboard)
 library(shinydashboardPlus)
 
 shinyApp(
  ui = dashboardPage(
    header = dashboardHeader(),
    body = dashboardBody(
      box(
        title = "Update box sidebar", 
        closable = TRUE, 
        width = 12,
        height = "500px",
        solidHeader = FALSE, 
        collapsible = TRUE,
        actionButton("update", "Toggle card sidebar"),
        sidebar = boxSidebar(
          id = "mycardsidebar",
          p("Sidebar Content")
        )
      )
    ),
    sidebar = dashboardSidebar()
  ),
  server = function(input, output, session) {
    observe(print(input$mycardsidebar))
    
    observeEvent(input$update, {
      updateBoxSidebar("mycardsidebar")
    })
    
  }
 )
}
}
